import Pointerify from "../pointerify/pointerify";
import Direction from "../shared/constants/direction";
import PointerStatus from "../shared/constants/pointerStatus";
import PointerType from "../shared/constants/pointerType";
declare class Pointer {
    id: string;
    status: PointerStatus;
    rafIdInertia: number;
    type: PointerType;
    startX: number;
    startY: number;
    startDistance: number;
    currentX: number;
    currentY: number;
    currentDistance: number;
    rootWidth: number;
    rootHeight: number;
    rootOffsetX: number;
    rootOffsetY: number;
    yinPointer: Pointer;
    yangPointer: Pointer;
    private velocitiesX;
    private velocitiesY;
    private velocitiesPinch;
    private pointerify;
    private isMonitoring;
    private rafIdVelocity;
    constructor(pointerify: Pointerify);
    readonly isMousePointer: boolean;
    readonly isTouchPointer: boolean;
    readonly isVirtualPointer: boolean;
    readonly isNew: boolean;
    readonly isInvalid: boolean;
    readonly isExtending: boolean;
    readonly isMoving: boolean;
    readonly isPinching: boolean;
    readonly isStopping: boolean;
    readonly velocityX: number;
    readonly velocityY: number;
    readonly directionX: Direction;
    readonly directionY: Direction;
    down(): void;
    move(): void;
    pinch(): void;
    up(): void;
    stop(): void;
    private readonly deltaX;
    private readonly deltaY;
    private readonly deltaDistance;
    private readonly deltaMultiplierX;
    private readonly deltaMultiplierY;
    private readonly deltaMultiplierDistance;
    private readonly multiplierX;
    private readonly multiplierY;
    private readonly velocityPinch;
    private readonly directionPinch;
    private startMonitorVelocity();
    private stopMonitorVelocity();
    private dispatchEvent(eventType);
    private getState();
}
export default Pointer;
