import Config from "../config/config";
import IConfig from "../config/interfaces/config";
import Pointer from "../pointer/pointer";
import PointerType from "../shared/constants/pointerType";
import IMouseOrTouchEvent from "./interfaces/mouseOrTouchEvent";
import ITouchesMap from "./interfaces/touchesMap";
import Refs from "./refs";
declare class Pointerify {
    mouse: Pointer;
    virtual: Pointer;
    touches: ITouchesMap;
    rootRect: ClientRect;
    refs: Refs;
    config: Config;
    isClicking: boolean;
    timerIdDoubleTap: number;
    private eventManager;
    private hasTapped;
    private static DURATION_DOUBLE_TAP;
    constructor(root: HTMLElement, config: IConfig);
    readonly totalTouches: number;
    configure(options: IConfig): void;
    refresh(): void;
    destroy(): void;
    cancelPointer(pointer: Pointer): void;
    setRootGeometry(): void;
    createPointer(e: IMouseOrTouchEvent, type: PointerType, isExtending?: boolean): Pointer;
    createVirtualPointer(yinPointer: Pointer, yangPointer: Pointer): Pointer;
    movePointer(pointer: Pointer, e?: IMouseOrTouchEvent, originalEvent?: IMouseOrTouchEvent): void;
    releasePointer(pointer: Pointer, e: IMouseOrTouchEvent): void;
    emitStatic(e: IMouseOrTouchEvent, type: string): void;
    emitEvent(e: CustomEvent): void;
    private init(root, config);
    private pinchPointer(pointer);
    private stopPointer(pointer);
    private deletePointer(pointer);
    private tap(e, isDouble?);
}
export default Pointerify;
